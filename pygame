#打包遊戲 把python打包成exe檔或安裝檔 用第三方模組 auto-py-exe
#遊戲初始畫面 告訴玩家怎麼操控飛船
#石頭掉寶&吃寶物的音效
#增加復活次數 多幾條命
#爆炸動畫 子彈射到石頭或石頭撞飛船會有的動畫 動畫就是短時間撥放一連串的照片
#增加生命條 撞到石頭越大顆 扣的血越多
#遊戲分數
#石頭動畫 讓他們邊下墜邊轉動
#加強碰撞判斷，更精確的判斷碰撞 ctrl+z返回上一步
#載入圖片
#子彈sprite&碰撞處理(有內建函式可以提供有沒有碰撞，不然很難判斷)
#石頭sprite
#操控sprite 物件根據鍵盤上的按鍵來移動
#sprite 可以拿來表示畫面上顯示的所有東西 例如石頭、子彈、飛船
import pygame # 按ctrl加`可以快速切換到終端(`是最左上角那個按鍵) #隨時記得存檔 #python 檔案名稱 為執行
import random
import os
FPS = 60
WIDTH = 500
HEIGHT = 600

WHITE = (255,255,255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
YELLOW = (255, 255, 0)
BLACK = (0, 0, 0)


#變數習慣用大寫來命名，設定之後就不會去改變了的變數會習慣這樣命名
#遊戲的初始化and創建視窗
pygame.init() #初始化
pygame.mixer.init() #先把音效模組初始化，才能引入音效
screen = pygame.display.set_mode((WIDTH, HEIGHT)) #創建視窗 #寫畫面高度&寬度 #沒有迴圈所以顯示一下就關閉了
pygame.display.set_caption("第一個遊戲") #改變視窗標題名稱
clock = pygame.time.Clock() #創建可以管理時間的物件

#載入圖片 載入前要初始化
background_img = pygame.image.load(os.path.join("img", "background.png")).convert() #os.path代表位置 convert轉換成容易讀取的格式，畫到畫面上較快
player_img = pygame.image.load(os.path.join("img", "player.png")).convert()
# rock_img = pygame.image.load(os.path.join("img", "rock.png")).convert()
player_mini_img = pygame.transform.scale(player_img, (25, 19)) #還剩幾條命用小飛船表示
player_mini_img.set_colorkey(BLACK)
pygame.display.set_icon(player_mini_img)       
bullet_img = pygame.image.load(os.path.join("img", "bullet.png")).convert()
rock_imgs = [] #用列表來存放下載的石頭
for i in range(7): #這邊的7表示從0跑到6
    rock_imgs.append(pygame.image.load(os.path.join("img", f"rock{i}.png")).convert()) #字串裡不能放變數，但前面有f就可以
expl_anim = {}
expl_anim['lg'] = [] #一連串的照片所以是列表 lg代表large #大爆炸是子彈打到石頭
expl_anim['sm'] = [] #sm代表small #小爆炸是飛船被石頭撞到
expl_anim['player'] = [] #在字典裡新增一個player代表Player的爆炸
for i in range(9): #用for迴圈把九張照片引入進來
    expl_img = pygame.image.load(os.path.join("img", f"expl{i}.png")).convert()
    expl_img.set_colorkey(BLACK)
    expl_anim['lg'].append(pygame.transform.scale(expl_img, (75, 75)))#把lg的照片append進去 但要先transform
    expl_anim['sm'].append(pygame.transform.scale(expl_img, (30, 30)))              
    player_expl_img = pygame.image.load(os.path.join("img", f"player_expl{i}.png")).convert()
    player_expl_img.set_colorkey(BLACK)
    expl_anim['player'].append(player_expl_img) #原本大小就很好了 不需重新定義
power_imgs = {} #寶物目前只有兩個，但可能加成很多個，所以用字典來寫
power_imgs['shield'] = pygame.image.load(os.path.join("img", f"shield.png")).convert()
power_imgs['gun'] = pygame.image.load(os.path.join("img", f"gun.png")).convert()

#載入音樂 跟載入圖片差不多
shoot_sound = pygame.mixer.Sound(os.path.join("sound", "shoot.wav")) #這邊好像不用convert
gun_sound = pygame.mixer.Sound(os.path.join("sound", "pow1.wav")) 
shield_sound = pygame.mixer.Sound(os.path.join("sound", "pow0.wav")) 
die_sound = pygame.mixer.Sound(os.path.join("sound", "rumble.ogg"))
expl_sounds = [
    pygame.mixer.Sound(os.path.join("sound", "expl0.wav")),
    pygame.mixer.Sound(os.path.join("sound", "expl1.wav"))
]
pygame.mixer.music.load(os.path.join("sound", "background.ogg"))
pygame.mixer.music.set_volume(0.4) #傳入數字0-1 代表聲音大小


font_name = os.path.join("font.ttf") #找要引入的字體  自己下載微軟正黑體
def draw_text(surf, text, size, x, y): #把文字寫到畫面上:寫在甚麼平面上、寫甚麼、大小、座標
    font = pygame.font.Font(font_name, size) #創建文字物件
    text_surface = font.render(text, True, WHITE) #把文字物件渲染出來 #寫出來的文字、字體要不要用反鋸齒(看起來較滑順)
    text_rect = text_surface.get_rect() #把文字定位 get rect就是定位的意思
    text_rect.centerx = x
    text_rect.top = y
    surf.blit(text_surface, text_rect) #畫在平面上

def new_rock():
    r = Rock()
    all_sprites.add(r) #把石頭加回all sprites的群組，才能更新&畫出來
    rocks.add(r) #把石頭加回石頭的群組，才可跟子彈判斷碰撞

def draw_health(surf, hp, x, y): #畫在甚麼平面、血量、座
    if hp < 0:
        hp = 0
    BAR_LENGTH = 100
    BAR_HEIGHT = 10
    fill = (hp/100)*BAR_LENGTH #fill是要把生命條填滿多少
    outline_rect = pygame.Rect(x, y, BAR_LENGTH, BAR_HEIGHT) #生命條的外框，是一個pygame的矩形
    fill_rect = pygame.Rect(x, y, fill, BAR_HEIGHT)
    pygame.draw.rect(surf, GREEN, fill_rect) #畫生命條
    pygame.draw.rect(surf, WHITE, outline_rect, 2) #畫外框 最後一個參數代表像素

def draw_lives(surf, lives, img, x, y):
    for i in range(lives):
        img_rect = img.get_rect()
        img_rect.x = x + 30*i #畫一個飛船之後，間隔30像素再畫一個，才不會疊在一起
        img_rect.y = y
        surf.blit(img, img_rect)

def draw_init(): #初始畫面要有遊戲名稱&如何操作
    screen.blit(background_img, (0,0)) #背景畫面加上去
    draw_text(screen, '太空大戰吉娃娃!', 64, WIDTH/2, HEIGHT/4)
    draw_text(screen, 'A、D移動飛船 空白鍵發射子彈~', 22, WIDTH/2, HEIGHT/2)
    draw_text(screen, '按任意鍵開始遊戲!', 18, WIDTH/2, HEIGHT*3/4)
    draw_text(screen, '參考自GrandmaCan-pygame 3小時製作一個遊戲', 15, WIDTH/2, HEIGHT*3.5/4)
    pygame.display.update() 
    waiting = True #寫一個while迴圈，如果鍵盤上有把按鍵按下去的事件，就讓遊戲開始 #表示目前還在等待鍵盤被按下去的事件
    while waiting:
        clock.tick(FPS) #如果沒有這行，那一秒鐘執行迴圈的次數會太多
        #取得輸入
        for event in pygame.event.get():#pygame.event.get()回傳所有發生的事件，包括鼠標到哪裡(以列表形式回傳)
            if event.type == pygame.QUIT:
                pygame.quit() #按叉叉就把視窗關掉
                return True #處理關閉視窗程式碼卻顯示錯誤的問題
            elif event.type == pygame.KEYUP: #按按鍵 KEYUP要等到鍵盤按下又鬆開才會開始 KEYDOWN則是按下就開始
                waiting = False
                return False #處理關閉視窗程式碼卻顯示錯誤的問題





class Player(pygame.sprite.Sprite): #創建一個類別叫做player，去繼承內建的sprite類別
    def __init__(self):   #底線有兩個 19行也是
        pygame.sprite.Sprite.__init__(self) #內建sprite的初始函式 要有image(圖片)與rect(拿來定位圖片)兩個屬性
        self.image = pygame.transform.scale(player_img, (70,58)) #這個參數可以調圖片大小
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()#定位 把圖片框起來，就能設定屬性(xy座標等等)
        self.radius = 30 #寬度的一半再減五 使用圓形碰撞判斷，所以要多一個radius的屬性 
        # pygame.draw.circle(self.image, RED, self.rect.center, self.radius) #把要判斷的圓形畫出來，畫在self.image上，畫成紅色，圓心在center  調好之後這一行就註解掉
        self.rect.centerx = WIDTH/2
        self.rect.bottom = HEIGHT - 10
        self.speedx = 8 #控制速度
        self.health = 100
        self.lives = 3
        self.hidden = False  #判斷現在飛船是不是在隱藏中 一開始是False
        self.hide_time = 0
        self.gun = 1 #設定子彈等級
        self.gun_time = 0
    def update(self):
        now = pygame.time.get_ticks()
        if self.gun > 1 and now - self.gun_time > 5000: #吃到之後過五秒就等級下降
            self.gun -= 1
            self.gun_time = now

        
        
        if self.hidden and now - self.hide_time > 1000:
            self.hidden = False  
            self.rect.centerx = WIDTH/2
            self.rect.bottom = HEIGHT - 10  
            #飛船在隱藏中且update函式被呼叫時，他的時間減掉隱藏時間已經大於1000毫秒，就讓它顯示回來

        key_pressed = pygame.key.get_pressed() #函式回傳一整串的布林值(每個按鍵有沒有被按)
        if key_pressed[pygame.K_d]: #判斷右鍵有沒有被按，有的話就是TRUE
            self.rect.x +=self.speedx
        if key_pressed[pygame.K_a]:
            self.rect.x -=self.speedx

        if self.rect.right > WIDTH: #卡住左右
            self.rect.right = WIDTH 
        if self.rect.left < 0:
            self.rect.left = 0
    
    def shoot(self): #定義shoot  才能用空白鍵控制射擊
        if not(self.hidden): #沒有死亡才能發射子彈
            if self.gun == 1: #子彈等級為一，就執行原本程式
                bullet = Bullet(self.rect.centerx, self.rect.top) #子彈要傳入兩個參數(子彈的起始位置)
                all_sprites.add(bullet) 
                bullets.add(bullet) #子彈加入子彈群組
                shoot_sound.play()
            elif self.gun >= 2:
                bullet1 = Bullet(self.rect.left, self.rect.centery) 
                bullet2 = Bullet(self.rect.right, self.rect.centery) 
                all_sprites.add(bullet1) 
                all_sprites.add(bullet2) 
                bullets.add(bullet1) 
                bullets.add(bullet2) 
                shoot_sound.play()


    def hide(self):
        self.hidden = True
        self.hide_time = pygame.time.get_ticks()
        self.rect.center = (WIDTH/2, HEIGHT+500) #定位在畫面之外就是隱藏了

    def gunup(self):
        self.gun += 1
        self.gun_time = pygame.time.get_ticks()  #時間設定成現在的時間

class Rock(pygame.sprite.Sprite): 
    def __init__(self):   
        pygame.sprite.Sprite.__init__(self) 
        self.image_ori = random.choice(rock_imgs) #ori表示origin 存放還沒失真的圖片 從列表裡隨機挑一個值ˇ出來
        self.image = self.image_ori.copy() #轉動後的圖片
        self.image_ori.set_colorkey(WHITE)
        self.image_ori.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.radius = int(self.rect.width / 2) #在未知石頭寬度時可以這樣打，已知就直接用數字即可 ctrl+/可註解 分數如果有小數點，要用int轉成整數
        # pygame.draw.circle(self.image, RED, self.rect.center, self.radius)  調好之後畫出紅色就註解掉
        self.rect.x = random.randrange(0, WIDTH - self.rect.width) #石頭出現位置
        self.rect.y = random.randrange(-180, -100)
        self.speedy = random.randrange(2, 5)   #掉下來的速度隨機
        self.speedx = random.randrange(-3, 3) #左邊不能寫正數，因為都是正的永遠都只會往右邊
        self.total_degree = 0
        self.rot_degree = random.randrange(-3, 3)

    def rotate(self):
        self.total_degree += self.rot_degree
        self.total_degree = self.total_degree % 360 #超過360度就取餘數
        self.image = pygame.transform.rotate(self.image_ori, self.total_degree) #紀錄轉動幾度 #轉動完都會有一點失真，但FPS是60，失真就一直疊加，圖片就轉出視窗了，所以每次都讓還沒失真的圖片轉動，就沒有疊加的問題了
        center = self.rect.center #原先的中心點
        self.rect = self.image.get_rect() #轉動後的圖片重新定位
        self.rect.center = center #轉動後的中心點


    def update(self):
        self.rotate()
        self.rect.y += self.speedy
        self.rect.x += self.speedx
        if self.rect.top > HEIGHT or self.rect.left > WIDTH or self.rect.right < 0:  #超過視窗就重置 冒號記得
            self.rect.x = random.randrange(0, WIDTH - self.rect.width) 
            self.rect.y = random.randrange(-100, -40)
            self.speedy = random.randrange(2, 10)   
            self.speedx = random.randrange(-3, 3)

class Bullet(pygame.sprite.Sprite): 
    def __init__(self, x, y):    #子彈位置跟著飛船
        pygame.sprite.Sprite.__init__(self) 
        self.image = pygame.transform.scale(bullet_img, (20,30))
        self.image.set_colorkey(WHITE)
        self.rect = self.image.get_rect()
        self.rect.centerx = x
        self.rect.bottom = y
        self.speedy = -10   #往上方射所以速度是負的
        

    def update(self):
        self.rect.y += self.speedy
        if self.rect.bottom < 0: #子彈出視窗就刪除
            self.kill() #kill是sprite裡的函式 把所有sprite群組裡的子彈移除

class Explosion(pygame.sprite.Sprite): 
    def __init__(self, center, size):    #爆炸的位置&大小
        pygame.sprite.Sprite.__init__(self) 
        self.size = size
        self.image = expl_anim[self.size][0] #看是大爆炸還是小爆炸的第0張圖片
        self.rect = self.image.get_rect()
        self.rect.center = center
        self.frame = 0 #現在更新到第幾張
        self.last_update = pygame.time.get_ticks()   #回傳從初始到現在經過的毫秒數
        self.frame_rate = 50  #至少經過幾毫秒才會更新到下一張圖片，因為用update來更新的話速度會太快(FPS60)，這裡可以控制爆炸的速度快慢
        

    def update(self):
        now = pygame.time.get_ticks()
        if now - self.last_update > self.frame_rate:
            self.last_update = now
            self.frame += 1
            if self.frame == len(expl_anim[self.size]): #如果frame到最後一張，就是會等於len
                self.kill() #到最後一張了就殺掉
            else:
                self.image = expl_anim[self.size][self.frame] #不是最後一張就看是大爆炸小爆炸的第幾張圖片
                center = self.rect.center #把center先記起來(因為要重新定位了)
                self.rect = self.image.get_rect() #把爆炸圖片重新定位
                self.rect.center = center   #定位在中心點
                
class Power(pygame.sprite.Sprite): 
    def __init__(self, center):    #寶物在哪裡
        pygame.sprite.Sprite.__init__(self) 
        self.type = random.choice(['shield', 'gun']) #代表現在是哪種寶物
        self.image = power_imgs[self.type]
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.rect.center = center
        self.speedy = 3   #寶物向下掉所以速度是正的
        

    def update(self):
        self.rect.y += self.speedy
        if self.rect.top > HEIGHT: 
            self.kill() #kill是sprite裡的函式 把所有sprite群組裡的寶物移除
        
all_sprites = pygame.sprite.Group() #sprite群組 可以放很多sprite的物件
rocks = pygame.sprite.Group() #創建石頭跟子彈的群組(來判斷碰撞)
bullets = pygame.sprite.Group()
powers = pygame.sprite.Group()

player = Player()  #把他加到群組裡
all_sprites.add(player)
for i in range(8): #八顆石頭 記得冒號
    new_rock() #石頭加入群組
score = 0
pygame.mixer.music.play(-1) #重複撥放音樂幾次 -1表示會無限重複撥放
    

#遊戲迴圈 #tab可以空格
show_init = True#多了初始畫面，所以要判斷初始畫面要不要顯示
running=True
while running:
    if show_init:
        close = draw_init()
        if close:
            break #有了break，關閉視窗就會直接跳出迴圈
        draw_init() #如果要顯示，就把初始畫面畫出來
        show_init = False
        all_sprites = pygame.sprite.Group() #重新玩一次所以東西要複製一份過來
        rocks = pygame.sprite.Group() 
        bullets = pygame.sprite.Group()
        powers = pygame.sprite.Group()
        player = Player()  
        all_sprites.add(player)
        for i in range(8): 
            new_rock() 
        score = 0
    
    
    clock.tick(FPS) #clock.tic在一秒鐘之內最多只能執行10次(括號裡是10)，解決不同電腦執行速度不同的問題
    #取得輸入
    for event in pygame.event.get():#pygame.event.get()回傳所有發生的事件，包括鼠標到哪裡(以列表形式回傳)
        if event.type == pygame.QUIT:
            running = False 
        elif event.type == pygame.KEYDOWN: #按按鍵
            if event.key == pygame.K_SPACE: #按空白鍵
                player.shoot()

    #更新遊戲
    all_sprites.update() #執行群組每個物件的update函式，每跑一次就會執行一次
    hits = pygame.sprite.groupcollide(rocks, bullets,True, True ) #表示石頭子彈碰撞到了 石頭&子彈要不要刪除掉 會回傳字典:key是石頭 value是子彈
    for hit in hits: #每碰撞到就要補一顆石頭，不然會沒有石頭
        random.choice(expl_sounds).play() #爆炸的聲音隨機播放
        score += hit.radius*10 #hit是碰撞到的那顆石頭 把石頭半徑加到分數上
        expl = Explosion(hit.rect.center, 'lg') 
        all_sprites.add(expl) #畫出來
        if random.random() > 0.909: #random.random這個函式會回傳0-1的隨機一個值
            pow = Power(hit.rect.center) #寶物位置就是石頭爆炸的位置
            all_sprites.add(pow) #加到all sprites內才會畫出來
            powers.add(pow) #判斷寶物跟飛船有沒有碰撞到，撞到飛船要吃掉寶物
        new_rock()

    hits = pygame.sprite.spritecollide(player, rocks, True, pygame.sprite.collide_circle) 
    #飛船&石頭碰撞、碰撞時刪石頭，回傳一個列表包含所有撞到的石頭 但使用矩形的碰撞判斷，因此較不準確，改成圓形的碰撞判斷較準確(但運算較複雜，速度較慢)，也有更精準的碰撞判斷 
    for hit in hits:
        new_rock()
        player.health -= hit.radius  
        expl = Explosion(hit.rect.center, 'sm') 
        all_sprites.add(expl)
        if player.health <= 0:
            death_expl = Explosion(player.rect.center, 'player')
            all_sprites.add(death_expl)
            die_sound.play()
            player.lives -= 1 
            player.health = 100
            player.hide() #死亡才不會馬上復活
    #判斷寶物、飛船相撞
    hits = pygame.sprite.spritecollide(player, powers, True)
    for hit in hits:
        if hit.type == 'shield':
            player.health += 20
            if player.health > 100:
                player.health = 100 #不能吃超過100
            shield_sound.play()

        elif hit.type == 'gun':
            player.gunup() #用此函式來處理吃到閃電之後要做的事
            gun_sound.play()
            
    if player.lives == 0 and not (death_expl.alive()):  #如果die不存在(動畫跑完)了才把running變成False，死掉遊戲才不會馬上關閉
        show_init = True
    
    #畫面顯示
    screen.fill(BLACK)#screen就是上面設定的視窗 red green blue分別能寫0-255
    screen.blit(background_img, (0,0))   #blit表示畫什麼&畫的位置(佔滿整張所以是0,0)
    all_sprites.draw(screen)  #把all_sprites群組裡的東西全部畫到screen上面
    draw_text(screen, str(score), 18, WIDTH/2, 10) #寫在甚麼平面、寫的文字(分數轉字串)、文字大小、x與y
    draw_health(screen, player.health, 5,15)
    draw_lives(screen, player.lives, player_mini_img, WIDTH - 100, 15) #一個是25像素，三個只占75，算間隔的話30*3=90，也是夠的 高度設成15，跟health一樣高即可
    pygame.display.update()
   
     

pygame.quit()
